name: Build and Release ESP32 Firmware

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PLATFORMIO_CORE_VERSION: "6.1.11"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [esp32-c3-devkitc-02]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: |
            ~/.platformio/.cache
            ~/.platformio/lib
            ~/.platformio/packages
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio==${{ env.PLATFORMIO_CORE_VERSION }}
          
      - name: Create secrets files from environment variables
        run: |
          mkdir -p src/secrets
          cat > src/secrets/google_secrets.h << EOF
          #pragma once
          #define GOOGLE_API_KEY "${{ secrets.GOOGLE_API_KEY }}"
          EOF
          
          cat > src/secrets/rmv_secrets.h << EOF
          #pragma once
          #define RMV_API_KEY "${{ secrets.RMV_API_KEY }}"
          EOF
          
      - name: Build firmware
        run: |
          cd e-board
          pio run -e ${{ matrix.environment }}
          
      - name: Create build info
        run: |
          cd e-board
          echo "Build Information" > build_info.txt
          echo "==================" >> build_info.txt
          echo "Commit: ${{ github.sha }}" >> build_info.txt
          echo "Branch: ${{ github.ref_name }}" >> build_info.txt
          echo "Environment: ${{ matrix.environment }}" >> build_info.txt
          echo "Build Date: $(date -u)" >> build_info.txt
          echo "PlatformIO Version: ${{ env.PLATFORMIO_CORE_VERSION }}" >> build_info.txt
          
      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v3
        with:
          name: firmware-${{ matrix.environment }}-${{ github.sha }}
          path: |
            e-board/.pio/build/${{ matrix.environment }}/firmware.bin
            e-board/.pio/build/${{ matrix.environment }}/firmware.elf
            e-board/.pio/build/${{ matrix.environment }}/partitions.bin
            e-board/.pio/build/${{ matrix.environment }}/bootloader.bin
            e-board/build_info.txt
          retention-days: 30
          
      - name: Upload filesystem artifacts
        uses: actions/upload-artifact@v3
        with:
          name: filesystem-${{ matrix.environment }}-${{ github.sha }}
          path: |
            e-board/.pio/build/${{ matrix.environment }}/littlefs.bin
            e-board/data/
          retention-days: 30
          
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create release package
        run: |
          mkdir -p release
          
          # Copy firmware files
          cp firmware-esp32-c3-devkitc-02-${{ github.sha }}/firmware.bin release/
          cp firmware-esp32-c3-devkitc-02-${{ github.sha }}/firmware.elf release/
          cp firmware-esp32-c3-devkitc-02-${{ github.sha }}/partitions.bin release/
          cp firmware-esp32-c3-devkitc-02-${{ github.sha }}/bootloader.bin release/
          cp firmware-esp32-c3-devkitc-02-${{ github.sha }}/build_info.txt release/
          
          # Copy filesystem
          cp filesystem-esp32-c3-devkitc-02-${{ github.sha }}/littlefs.bin release/
          
          # Create flashing instructions
          cat > release/FLASHING_INSTRUCTIONS.md << 'EOF'
          # MyStation E-Board Firmware Flashing Instructions
          
          ## Prerequisites
          - Install [Python](https://www.python.org/downloads/)
          - Install esptool: `pip install esptool`
          
          ## Method 1: Using esptool (Recommended)
          ```bash
          # Erase flash (optional but recommended)
          esptool.py --chip esp32c3 --port COM3 erase_flash
          
          # Flash firmware
          esptool.py --chip esp32c3 --port COM3 --baud 921600 write_flash \
            0x0000 bootloader.bin \
            0x8000 partitions.bin \
            0x10000 firmware.bin \
            0x290000 littlefs.bin
          ```
          
          ## Method 2: Using PlatformIO
          ```bash
          # Install PlatformIO
          pip install platformio
          
          # Flash firmware
          pio run -e esp32-c3-devkitc-02 --target upload
          
          # Flash filesystem
          pio run -e esp32-c3-devkitc-02 --target uploadfs
          ```
          
          ## Port Detection
          - **Windows**: Usually COM3, COM4, etc.
          - **Linux**: Usually /dev/ttyUSB0, /dev/ttyACM0
          - **macOS**: Usually /dev/cu.usbserial-* or /dev/cu.usbmodem-*
          
          ## Troubleshooting
          - Hold BOOT button while connecting USB to enter download mode
          - Try different baud rates: 115200, 460800, 921600
          - Check that CH340/CP2102 drivers are installed
          
          ## After Flashing
          1. Reset the device
          2. Connect to "MyStation-XXXX" WiFi network
          3. Open browser and go to http://192.168.4.1
          4. Configure your location and transport settings
          
          For detailed setup instructions, visit: https://yourusername.github.io/gogo-boot/
          EOF
          
          # Create version info
          cat > release/VERSION.txt << EOF
          MyStation E-Board Firmware
          Version: ${{ github.ref_name }}
          Build: ${{ github.sha }}
          Date: $(date -u)
          Target: ESP32-C3
          EOF
          
          # Create ZIP package
          cd release
          zip -r ../mystation-firmware-${{ github.ref_name }}.zip .
          cd ..
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mystation-firmware-${{ github.ref_name }}.zip
            release/firmware.bin
            release/littlefs.bin
            release/FLASHING_INSTRUCTIONS.md
            release/VERSION.txt
          name: MyStation E-Board ${{ github.ref_name }}
          body: |
            # MyStation E-Board Firmware Release ${{ github.ref_name }}
            
            ## 🚀 What's New
            - ESP32-C3 optimized firmware
            - Web-based configuration interface
            - Real-time transport departures
            - Weather information display
            - Power-efficient deep sleep mode
            
            ## 📦 Files Included
            - `firmware.bin` - Main firmware binary
            - `littlefs.bin` - Filesystem with web interface
            - `mystation-firmware-${{ github.ref_name }}.zip` - Complete package
            - `FLASHING_INSTRUCTIONS.md` - Detailed flashing guide
            
            ## 🔧 Quick Flash Command
            ```bash
            esptool.py --chip esp32c3 --port COM3 --baud 921600 write_flash \
              0x0000 bootloader.bin \
              0x8000 partitions.bin \
              0x10000 firmware.bin \
              0x290000 littlefs.bin
            ```
            
            ## 📚 Documentation
            Full documentation available at: https://yourusername.github.io/gogo-boot/
            
            ## 🐛 Issues
            Report issues at: https://github.com/yourusername/gogo-boot/issues
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
